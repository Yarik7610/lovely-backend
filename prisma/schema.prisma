generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
  other
}

enum Action {
  dislike
  like
}

model User {
  id               String     @id @default(uuid())
  email            String     @unique
  hashed_password  String?
  oauth_provider   String?
  oauth_id         String?
  name             String?
  age              Int?
  gender           Gender?
  city             String?
  bio              String?
  interests        Interest[] @relation("users_interests")
  photo_urls       Json?
  sent_swipes      Swipe[]    @relation("swiper")
  received_swipes  Swipe[]    @relation("swiped")
  matches_as_user1 Match[]    @relation("user1")
  matches_as_user2 Match[]    @relation("user2")
  sent_messages    Message[]  @relation("sender")
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt

  @@map("users")
}

model Interest {
  id         String   @id @default(uuid())
  name       String   @unique
  users      User[]   @relation("users_interests")
  created_at DateTime @default(now())

  @@map("interests")
}

model Swipe {
  id         String   @id @default(uuid())
  swiper_id  String
  swiper     User     @relation("swiper", fields: [swiper_id], references: [id], onDelete: Cascade)
  swiped_id  String
  swiped     User     @relation("swiped", fields: [swiped_id], references: [id], onDelete: Cascade)
  action     Action
  created_at DateTime @default(now())

  @@map("swipes")
}

model Match {
  id         String    @id @default(uuid())
  user_1_id  String
  user_1     User      @relation("user1", fields: [user_1_id], references: [id], onDelete: Cascade)
  user_2_id  String
  user_2     User      @relation("user2", fields: [user_2_id], references: [id], onDelete: Cascade)
  messages   Message[]
  created_at DateTime  @default(now())

  @@unique([user_1_id, user_2_id])
  @@map("matches")
}

model Message {
  id         String   @id @default(uuid())
  match_id   String
  match      Match    @relation(fields: [match_id], references: [id], onDelete: Cascade)
  sender_id  String
  sender     User     @relation("sender", fields: [sender_id], references: [id], onDelete: Cascade)
  content    String
  created_at DateTime @default(now())

  @@map("messages")
}
