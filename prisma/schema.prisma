generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
  other
}

enum Action {
  dislike
  like
}

model EmailVerificateToken {
  id        String   @id @default(uuid())
  email     String   @unique
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String   @unique
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, token])
}

model User {
  id             String        @id @default(uuid())
  email          String        @unique
  emailVerified  Boolean       @default(false)
  hashedPassword String?
  oauthProvider  String?
  oauthId        String?
  name           String?
  age            Int?
  gender         Gender?
  city           String?
  bio            String?
  interests      Interest[]    @relation("usersInterests")
  photoUrls      Json?
  sentSwipes     Swipe[]       @relation("swiper")
  receivedSwipes Swipe[]       @relation("swiped")
  matchesAsUser1 Match[]       @relation("user1")
  matchesAsUser2 Match[]       @relation("user2")
  sentMessages   Message[]     @relation("sender")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  refreshToken   RefreshToken?
}

model Interest {
  id        String   @id @default(uuid())
  name      String   @unique
  users     User[]   @relation("usersInterests")
  createdAt DateTime @default(now())
}

model Swipe {
  id        String   @id @default(uuid())
  swiperId  String
  swiper    User     @relation("swiper", fields: [swiperId], references: [id], onDelete: Cascade)
  swipedId  String
  swiped    User     @relation("swiped", fields: [swipedId], references: [id], onDelete: Cascade)
  action    Action
  createdAt DateTime @default(now())
}

model Match {
  id        String    @id @default(uuid())
  user1Id   String
  user1     User      @relation("user1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2Id   String
  user2     User      @relation("user2", fields: [user2Id], references: [id], onDelete: Cascade)
  messages  Message[]
  createdAt DateTime  @default(now())

  @@unique([user1Id, user2Id])
}

model Message {
  id        String   @id @default(uuid())
  matchId   String
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  senderId  String
  sender    User     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now())
}
